import numpy as np

"""
Chappell equation [1]: Modelling of the ASL signal (DeltaM) over time.
    Inputs:
 t - Time points (seconds)
 att - Arterial transit time (ATT), time until the blood arrives in the voxel [s]
 cbf - Cerebral blood flow (CBF) in [ml/min/100g]
 m0a - Scaling factor: M0 value of the arterial blood signal (e.g. from M0. nii)
 tau - Duration of the labelling phase (tau) [s]
 T1a - Longitudinal relaxation time of the arterial blood [s] (default: 1.65s)
 lambd - Blood-tissue-water partition coefficient (default: 0.9)
 alpha - Effective labelling efficiency (e.g. 0.85 * 0.8)
 Output:
 deltaM - Expected signal curve DeltaM(t) for a single voxel
 
"""

def deltaM_model(t, att, cbf, m0a, tau, T1a=1.65, lambd=0.9, alpha=0.85*0.8):
    # Initialise the return array with zeros (for times t < att)
    deltaM = np.zeros_like(t)

    #  Time points from which the labelled blood has arrived
    valid = t > att

    # Exponential decay of the ASL signal from arrival time (blood begins to generate signal)
    exp1 = np.exp(-(t[valid] - att) / T1a)

    # Exponential decay from arrival + bolus duration (blood flows out of the voxel)
    exp2 = np.exp(-(t[valid] - att - tau) / T1a)

    # Voxelwise Cappell equation [1] for all valid time points (those where the labelled blood has arrived)
    # (exp1 - exp2) models the relaxation within the bolus duration
    deltaM[valid] = (
        (2 * alpha * cbf / 6000)      # Conversion factor: CBF from ml/min/100g â†’ ml/s/g
        * m0a                         # Scaling by M0a
        * np.exp(-att / T1a)          # Relaxation of the blood signal until arrival
        * (T1a / lambd)               # Normalisation to tissue water concentration
        * (exp1 - exp2)               # Gives the complete signal contribution generated by the labelled blood in the voxel during the time period, see above
    )
    return deltaM
